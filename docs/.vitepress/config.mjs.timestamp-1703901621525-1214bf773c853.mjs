// docs/.vitepress/config.mjs
import { defineConfig } from "file:///E:/other/wedocs/node_modules/vitepress/dist/node/index.js";

// docs/.vitepress/utils/autodoc.js
import fg from "file:///E:/other/wedocs/node_modules/fast-glob/out/index.js";
import { sortBy, orderBy, cloneDeep } from "file:///E:/other/wedocs/node_modules/lodash-es/lodash.js";
function tree_array2Tree(arrs, id = "id", pid = "pid", children = "children") {
  let idObject = {};
  arrs.forEach((item) => {
    idObject[item.id] = item;
  });
  let treeData = [];
  arrs.forEach((item) => {
    let pData = idObject[item[pid]];
    if (pData) {
      if (!pData[children]) {
        pData[children] = [];
      }
      pData[children].push(item);
    } else {
      if (!item[children]) {
        item[children] = [];
      }
      treeData.push(item);
    }
  });
  return treeData;
}
function autoSideBar(dirPath) {
  let files = fg.sync(`docs/${dirPath}/**/*.md`, {
    onlyFiles: true
  });
  console.log("\u4FA7\u680F\u6587\u4EF6", files);
  let obj = {};
  files.forEach((file) => {
    console.log(file);
    let fileEnd = file.replace(`docs/${dirPath}`, "");
    console.log("\u4FA7\u680FfileEnd", fileEnd);
    let fileArrs = fileEnd.split("/");
    console.log("\u4FA7\u680FfileArrs", fileArrs);
    fileArrs.forEach((name, index) => {
      let selfPath = fileArrs.slice(0, index + 2).join("/");
      let parentPath = fileArrs.slice(0, index).join("/");
      let param = {
        id: selfPath,
        pid: parentPath,
        text: "\u{1F4C4} " + name.replace(/\d+-/gi, "").replace(".md", "")
      };
      if (name.endsWith(".md")) {
        param.link = `${dirPath}${selfPath}`;
        if (index === 0) {
          obj[dirPath] = {
            id: dirPath,
            pid: "",
            text: dirPath.split("/").filter((name2) => name2)[1].replace(/\d+-/gi, "").replace(".md", ""),
            collapsed: false
          };
          param.pid = dirPath;
        }
      }
      obj[selfPath] = param;
    });
  });
  let treeSideBar = orderBy(
    tree_array2Tree(Object.values(obj), "id", "pid", "items"),
    (item) => {
      return Number(item.id.split("-")[0]);
    }
  );
  console.log("treeSideBar", treeSideBar);
  treeSideBar.forEach((item) => {
    item.text = `\u{1F4C1} ${item.text.replace("\u{1F4C4} ", "")}`;
    if (item.collapsed !== false)
      item.collapsed = true;
    item.items = orderBy(cloneDeep(item.items), (item2) => {
      let nameSp = item2.id.split("/");
      let lastName = nameSp?.[1] || nameSp?.[0];
      return Number(lastName.split("-")[0]);
    });
  });
  return treeSideBar;
}
function setSideBar() {
  let files = fg.sync(`docs/markdown/**/[0-9]+-*.md`, {
    onlyFiles: true,
    ignore: ["markdown/**/**/*"]
  });
  let obj = {};
  files.sort().forEach((file) => {
    let fileEnd = file.replace(/^markdown/gi, "");
    let fileSplit = fileEnd.split("/").filter((name) => name);
    console.log(fileSplit);
    if (fileSplit.length < 3 && fileSplit.length > 4) {
      console.log(`${fileEnd} \u8BF7\u6309\u7167 \u5206\u7C7B-[\u9879\u76EE]-\u76EE\u5F55-\u6587\u7AE0 \u7684\u65B9\u5F0F\u7EC4\u7EC7\u6587\u4EF6`);
      return false;
    }
    let dirPath = `/${fileSplit[1]}/${fileSplit[2]}/`;
    console.log(dirPath);
    if (obj[dirPath] === void 0) {
      obj[dirPath] = autoSideBar(dirPath);
    }
  });
  console.log("\u4FA7\u680F\u7ED3\u679C", obj);
  return obj;
}
function setNavBar() {
  let files = fg.sync(`docs/markdown/**/[0-9]+-*.md`, {
    onlyFiles: true,
    ignore: ["markdown/**/**/*"]
  });
  let filesSort = files.sort();
  let obj = /* @__PURE__ */ new Map();
  let navNameObject = {};
  filesSort.forEach((file) => {
    let fileEnd = file.replace(/^docs\/markdown/gi, "");
    let fileSplit = fileEnd.split("/").filter((name) => name);
    let navName = fileSplit[0].replace(/^\d+-/, "");
    let linkName = fileSplit[1].replace(/^\d+-/, "");
    if (fileSplit.length <= 2)
      return false;
    if (obj.has(navName) === false) {
      navNameObject[navName] = [linkName];
      obj.set(navName, {
        text: navName.replace(/^\d+-/, ""),
        items: [
          {
            text: linkName,
            link: "markdown" + fileEnd.replace(".md", "")
          }
        ]
      });
    } else {
      if (navNameObject[navName].includes(linkName) === false) {
        navNameObject[navName].push(linkName);
        let item = obj.get(navName);
        item.items.push({
          text: linkName,
          link: "markdown" + fileEnd.replace(".md", "")
        });
        obj.set(navName, item);
      }
    }
  });
  return [...obj.values()];
}
function docsAuto() {
  let sideBar2 = setSideBar();
  let navBar2 = setNavBar();
  return {
    sideBar: sideBar2,
    navBar: navBar2
  };
}

// docs/.vitepress/config.mjs
var { sideBar, navBar } = docsAuto();
console.log("\u4FA7\u680F\u5217\u8868", sideBar);
var config_default = defineConfig({
  title: "hongyangwu",
  description: "A VitePress Site",
  lastUpdated: true,
  cleanUrls: true,
  markdown: {
    math: true,
    lineNumbers: true,
    codeTransformers: [
      // We use `[!!code` in demo to prevent transformation, here we revert it back.
      {
        postprocess(code) {
          return code.replace(/\[\!\!code/g, "[!code");
        }
      }
    ]
  },
  sitemap: {
    hostname: "https://www.hongyangwu.top",
    transformItems(items) {
      return items.filter((item) => !item.url.includes("migration"));
    }
  },
  head: [
    // 配置网站的图标（显示在浏览器的 tab 上）
    ["link", { rel: "icon", href: "/favicon.ico" }],
    [
      "script",
      {
        async: "",
        src: "/tsparticles.all.bundle.min.js"
      }
    ],
    ["script", { async: "", src: "/particles.js" }]
  ],
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    logo: "logo.png",
    lang: "zh-CN",
    search: {
      provider: "local",
      options: {
        _render(src, env, md) {
          const html = md.render(src, env);
          if (env.frontmatter?.search === false)
            return "";
          if (env.relativePath.startsWith("some/path"))
            return "";
          return html;
        }
      }
    },
    nav: navBar,
    sidebar: sideBar,
    socialLinks: [{ icon: "github", link: "https://github.com" }],
    footer: {
      message: "",
      copyright: `Copyright \xA9 2021-${(/* @__PURE__ */ new Date()).getFullYear()} hongyangwu`
    }
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
