import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"<script>","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/4-JavaScript/1 基础/1-script标签.md","filePath":"markdown/1-前端/4-JavaScript/1 基础/1-script标签.md"}');
const _sfc_main = { name: "markdown/1-前端/4-JavaScript/1 基础/1-script标签.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="script" tabindex="-1"><code>&lt;script&gt;</code> <a class="header-anchor" href="#script" aria-label="Permalink to &quot;\`&lt;script&gt;\`&quot;">​</a></h1><h2 id="script-元素" tabindex="-1">script 元素 <a class="header-anchor" href="#script-元素" aria-label="Permalink to &quot;script 元素&quot;">​</a></h2><p>所有除 <strong>defer</strong> 和 <strong>async</strong> 属性外的 <strong>script</strong> 元素都必须严格按次序执行</p><p>执行会阻塞页面，所以一般会放在 <code>&lt;/body&gt;</code> 的前面，防止渲染被阻塞，出现白屏</p><h2 id="行内代码和外部文件" tabindex="-1">行内代码和外部文件 <a class="header-anchor" href="#行内代码和外部文件" aria-label="Permalink to &quot;行内代码和外部文件&quot;">​</a></h2><ol><li>嵌入行内代码，把代码放在<code>&lt;script&gt;</code>元素中即可</li><li>引入外部文件，需要使用 <strong>src</strong> 属性 <ul><li>可跨域</li></ul></li></ol><h2 id="defer-脚本" tabindex="-1"><strong>defer</strong> 脚本 <a class="header-anchor" href="#defer-脚本" aria-label="Permalink to &quot;**defer** 脚本&quot;">​</a></h2><ul><li><p>脚本会延迟到整个页面都解析完毕后再执行</p></li><li><p>按照出现顺序执行（现实中不一定）</p></li><li><p>在 <strong>DOMContentLoaded</strong> 事件前执行（现实中不一定）</p></li><li><p>只对外部脚本文件有效（IE4~7行内脚本也有效）</p></li></ul><h2 id="async-脚本" tabindex="-1"><strong>async</strong> 脚本 <a class="header-anchor" href="#async-脚本" aria-label="Permalink to &quot;**async** 脚本&quot;">​</a></h2><ul><li>异步下载，执行时间不固定，所以不应该在加载期间修改 <strong>DOM</strong></li><li>不保证按顺序执行</li><li>在 <strong>load</strong> 事件前执行</li><li>只对外部脚本文件有效</li></ul><h2 id="动态加载脚本" tabindex="-1">动态加载脚本 <a class="header-anchor" href="#动态加载脚本" aria-label="Permalink to &quot;动态加载脚本&quot;">​</a></h2><p>通过向 <strong>DOM</strong> 中动态添加 <strong>script</strong> 元素加载，行为与 <strong>async</strong> 属性相似</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> script</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;script&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">script.src </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;xx.js&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">document.body.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">appendChild</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(script)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果要控制动态脚本的加载行为，可以明确将其设置为同步加载</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> script</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;script&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">script.src </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;xx.js&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">script.async </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> false</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">document.body.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">appendChild</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(script)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/4-JavaScript/1 基础/1-script标签.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _1Script__ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _1Script__ as default
};
