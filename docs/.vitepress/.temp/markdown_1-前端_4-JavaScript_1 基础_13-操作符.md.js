import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"操作符","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/4-JavaScript/1 基础/13-操作符.md","filePath":"markdown/1-前端/4-JavaScript/1 基础/13-操作符.md"}');
const _sfc_main = { name: "markdown/1-前端/4-JavaScript/1 基础/13-操作符.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="操作符" tabindex="-1">操作符 <a class="header-anchor" href="#操作符" aria-label="Permalink to &quot;操作符&quot;">​</a></h1><h2 id="一元操作符" tabindex="-1">一元操作符 <a class="header-anchor" href="#一元操作符" aria-label="Permalink to &quot;一元操作符&quot;">​</a></h2><ul><li>定义：只操作一个值的操作符</li></ul><h5 id="_1-递增-递减操作符" tabindex="-1">（1）递增 / 递减操作符 <a class="header-anchor" href="#_1-递增-递减操作符" aria-label="Permalink to &quot;（1）递增 / 递减操作符&quot;">​</a></h5><ul><li><p>操作符</p><ol><li><strong>++</strong>：给数值加一</li><li><strong>--</strong>：给数值减一</li></ol></li><li><p>操作</p><ol><li><code>前缀</code>操作：变量的值都会在语句被求职之前改变</li><li><code>后缀</code>操作：在语句被求职后才发生改变</li></ol></li><li><p>类型转换规则。<strong>转换后的类型均为 Number 类型</strong></p></li></ul><table><thead><tr><th>类型</th><th>规则</th></tr></thead><tbody><tr><td>String</td><td>- 有效的数值形式，则转换为数值再应用改变<br>- 无效的数值形式，则值设置为 NaN</td></tr><tr><td>Boolean</td><td>- true，转换为 1，再应用改变。<br>- false，转换为 0， 再应用改变</td></tr><tr><td>Number</td><td>加一或减一</td></tr><tr><td>Object</td><td>1. 调用其 valueOf() 方法取得可以操作的值，应用上述规则。若为 NaN，则走第 2 步<br>2. 调用 toString() ，并再次应用其他规则</td></tr></tbody></table><h5 id="_2-一元加和减" tabindex="-1">（2）一元加和减 <a class="header-anchor" href="#_2-一元加和减" aria-label="Permalink to &quot;（2）一元加和减&quot;">​</a></h5><ul><li>用途与数学一样</li><li>此操作符应用到非数值，会<code>执行 Number() 进行类型转换</code></li></ul><h2 id="布尔操作符" tabindex="-1">布尔操作符 <a class="header-anchor" href="#布尔操作符" aria-label="Permalink to &quot;布尔操作符&quot;">​</a></h2><h5 id="_1-逻辑非-由一个-表示" tabindex="-1">（1）逻辑非：由一个 <code>!</code> 表示 <a class="header-anchor" href="#_1-逻辑非-由一个-表示" aria-label="Permalink to &quot;（1）逻辑非：由一个 \`!\` 表示&quot;">​</a></h5><ul><li>会遵守如下规则，且始终返回布尔值</li></ul><table><thead><tr><th>类型</th><th>规则</th></tr></thead><tbody><tr><td>Object</td><td>返回 false</td></tr><tr><td>String</td><td>- 空字符串，返回 false<br>- 非空字符串，返回 true</td></tr><tr><td>Number</td><td>- 数值 0，返回 true<br>- 非 0 数值，返回 false<br>- NaN，返回 true</td></tr><tr><td>Null</td><td>返回 true</td></tr><tr><td>Undefined</td><td>返回 true</td></tr></tbody></table><h5 id="_2-逻辑与-由-表示" tabindex="-1">（2）逻辑与：由 <code>&amp;&amp;</code> 表示 <a class="header-anchor" href="#_2-逻辑与-由-表示" aria-label="Permalink to &quot;（2）逻辑与：由 \`&amp;&amp;\` 表示&quot;">​</a></h5><ul><li><p>返回规则</p><ol><li>如果第一个操作数是真值，返回第二个操作数</li><li>如果第一个操作数是假值，返回第一个操作数</li></ol></li><li><p>短路特性：如果第一个操作数是假值了，则永远不会执行第二个操作数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> reuslt</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> false</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> &amp;&amp;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> unVariable </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// unVariable 未定义，但不会报错，因为第一个操作数是假值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h5 id="_3-逻辑或-由-表示" tabindex="-1">（3）逻辑或：由 <code>||</code> 表示 <a class="header-anchor" href="#_3-逻辑或-由-表示" aria-label="Permalink to &quot;（3）逻辑或：由 \`||\` 表示&quot;">​</a></h5><ul><li><p>返回规则</p><ol><li>如果第一个操作数是真值，返回第一个操作数</li><li>如果第一个操作数是假值，返回第二个操作数</li></ol></li><li><p>短路特性：如果第一个操作数是真值了，则永远不会执行第二个操作数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> reuslt</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> true</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> ||</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> unVariable </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// unVariable 未定义，但不会报错，因为第一个操作数是真值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="乘性操作符" tabindex="-1">乘性操作符 <a class="header-anchor" href="#乘性操作符" aria-label="Permalink to &quot;乘性操作符&quot;">​</a></h2><h5 id="_1-乘法操作符-由一个星号-表示" tabindex="-1">（1）乘法操作符：由一个星号 <code>*</code> 表示 <a class="header-anchor" href="#_1-乘法操作符-由一个星号-表示" aria-label="Permalink to &quot;（1）乘法操作符：由一个星号 \`*\` 表示&quot;">​</a></h5><p>$$ \\begin{align} 数值 * 数值 = 正常数值\\ |\\ Infinity\\ |\\ -Infinity \\ NaN * any = NaN \\ Infinity * 0 = NaN \\ Infinity * (非 0、NaN 数值) = Infinity \\end{align} $$</p><p>不是数值的操作数，则先用 <strong>Number()</strong> 转换为数值，再应用以上规则</p><h5 id="_2-除法操作符-由一个斜杠-表示" tabindex="-1">（2）除法操作符：由一个斜杠 <code>/</code> 表示 <a class="header-anchor" href="#_2-除法操作符-由一个斜杠-表示" aria-label="Permalink to &quot;（2）除法操作符：由一个斜杠 \`/\` 表示&quot;">​</a></h5><p>$$ \\begin{align} 数值\\ /\\ 数值 = 正常数值\\ |\\ Infinity\\ |\\ -Infinity \\ NaN\\ /\\ any = NaN \\ Infinity\\ /\\ Infinity = NaN \\ 0\\ /\\ 0 = NaN \\ (非 0 有限值)\\ /\\ 0 = Infinity\\ |\\ -Infinity \\ Infinity\\ /\\ any = Infinity\\ |\\ -Infinity \\ \\end{align} $$</p><p>不是数值的操作数，则先用 <strong>Number()</strong> 转换为数值，再应用以上规则</p><h5 id="_3-取模操作符-由一个百分比符号-表示" tabindex="-1">（3）取模操作符：由一个百分比符号 <code>%</code> 表示 <a class="header-anchor" href="#_3-取模操作符-由一个百分比符号-表示" aria-label="Permalink to &quot;（3）取模操作符：由一个百分比符号 \`%\` 表示&quot;">​</a></h5><p>$$ \\begin{align} 数值\\ %\\ 数值 = 正常余数 \\ Infinity\\ %\\ any = NaN \\ 有限值\\ %\\ 0 = NaN \\ 有限值\\ %\\ Infinity = 被除数 \\ 0\\ %\\ \\lnot 0 = 0 \\end{align} $$</p><p>不是数值的操作数，则先用 <strong>Number()</strong> 转换为数值，再应用以上规则</p><h2 id="指数操作符" tabindex="-1">指数操作符 <a class="header-anchor" href="#指数操作符" aria-label="Permalink to &quot;指数操作符&quot;">​</a></h2><ul><li><p><code>Math.pow()</code> 和 <code>**</code> （ECMAScript 7）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">Math.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">pow</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">3</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 9</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">3</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> **</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 2</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">         //9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>指数赋值操作符 <code>**=</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> num </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 3</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">num </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">**=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 2</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(num) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="加性操作符" tabindex="-1">加性操作符 <a class="header-anchor" href="#加性操作符" aria-label="Permalink to &quot;加性操作符&quot;">​</a></h2><p>加法和减法操作符</p><h5 id="_1-加法操作符" tabindex="-1">（1）加法操作符（ + ） <a class="header-anchor" href="#_1-加法操作符" aria-label="Permalink to &quot;（1）加法操作符（ + ）&quot;">​</a></h5><table><thead><tr><th>情况</th><th>规则</th></tr></thead><tbody><tr><td>两个操作数都是数值</td><td>有任一操作数是 NaN，返回 NaN<br>Infinity + Infinity = Infinity<br>-Infinity + -Infinity = -Infinity<br>Infinity + -Infinity = NaN<br>+0 + +0 = +0<br>-0 + +0 = +0<br>-0 + -0 = -0</td></tr><tr><td>有一个操作数是字符串</td><td>两个操作数都是字符串，则返回第一个字符串拼接第二个字符串的结果<br>只有一个操作数是字符串，将另一个操作数转换为字符串，再将两个字符串拼接</td></tr><tr><td>有一个操作数是对象、数值、布尔值</td><td>调用其 toString() 方法获取字符串，再应用上述字符串规则</td></tr><tr><td>有一个操作数是undefined、null</td><td>调用其 String() 方法获取 “undefined” 或 “null”，再应用上述字符串规则</td></tr></tbody></table><h5 id="_2-减法操作符" tabindex="-1">（2）减法操作符（ - ） <a class="header-anchor" href="#_2-减法操作符" aria-label="Permalink to &quot;（2）减法操作符（ - ）&quot;">​</a></h5><table><thead><tr><th>情况</th><th>规则</th></tr></thead><tbody><tr><td>两个操作数都是数值</td><td>有任一操作数是 NaN，返回 NaN<br>Infinity - Infinity = NaN<br>+0 - +0 = +0<br>+0 - -0 = -0<br>-0 + -0 = +0</td></tr><tr><td>有一个操作数是字符串、布尔值、null、undefined</td><td>用 Number() 转换为数值，再根据前面规则</td></tr><tr><td>有一个操作数是对象</td><td>调用 valueOf() 方法取得表示它的数值，如果值是 NaN，则结果为 NaN<br>如果没有 valueOf() 方法，则调用 toString() 得到字符串转换为数值计算</td></tr></tbody></table><h2 id="关系操作符" tabindex="-1">关系操作符 <a class="header-anchor" href="#关系操作符" aria-label="Permalink to &quot;关系操作符&quot;">​</a></h2><p>小于（<code>&lt;</code>）、大于（<code>&gt;</code>）、小于等于（<code>&lt;=</code>）、大于等于（<code>&gt;=</code>）</p><p>比较应用以下规则，均返回<code>布尔值</code></p><table><thead><tr><th>情况</th><th>规则</th></tr></thead><tbody><tr><td>两个操作数都是数值</td><td>数值比较</td></tr><tr><td>有一个操作数是字符串</td><td>逐个比较字符串中对应字符的编码</td></tr><tr><td>有一个操作数是对象</td><td>调用 valueOf() 方法取得表示它的数值，再进行比较<br>如果没有 valueOf() 方法，则调用 toString() 得到字符串，再进行比较</td></tr><tr><td>有一个操作数是布尔值</td><td>将其转换为数值后比较</td></tr></tbody></table><h2 id="相等操作符" tabindex="-1">相等操作符 <a class="header-anchor" href="#相等操作符" aria-label="Permalink to &quot;相等操作符&quot;">​</a></h2><h5 id="_1-等于-和不等于" tabindex="-1">（1）等于（<code>==</code>）和不等于（<code>!=</code>） <a class="header-anchor" href="#_1-等于-和不等于" aria-label="Permalink to &quot;（1）等于（\`==\`）和不等于（\`!=\`）&quot;">​</a></h5><ul><li>两个操作符会先进行强制类型转换，再确定是否相等</li></ul><table><thead><tr><th>情况</th><th>规则</th></tr></thead><tbody><tr><td>有任一操作数是布尔值</td><td>将其转换为数值后再比较是否相等。true 转换为 1、false 转换为 0</td></tr><tr><td>有任一操作数是字符串<br>另一个操作数是数值</td><td>尝试将字符串转换为数值，再比较是否相等</td></tr><tr><td>有任一操作数是对象<br>另一个不是</td><td>调用 valueOf() 方法取得原始值，再进行前面的规则比较</td></tr></tbody></table><p>同时还要遵循如下规则</p><ul><li>null 和 undefined 相等</li><li>null 和 undefined 不能转换为其他类型的值再比较</li><li>有任一操作数是 NaN，则相等操作符返回 false，不相等操作符返回 true</li><li>两个操作数都是对象，则比较他们是否不是同一地址的对象</li></ul><h5 id="_2-全等-和不全等" tabindex="-1">（2）全等（<code>===</code>）和不全等（<code>!==</code>） <a class="header-anchor" href="#_2-全等-和不全等" aria-label="Permalink to &quot;（2）全等（\`===\`）和不全等（\`!==\`）&quot;">​</a></h5><ul><li>只有两个操作数在不转换的前提下相等才返回 true</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/4-JavaScript/1 基础/13-操作符.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _13____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _13____ as default
};
