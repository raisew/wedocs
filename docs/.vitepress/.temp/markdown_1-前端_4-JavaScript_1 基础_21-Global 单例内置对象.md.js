import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"Global 单例内置对象","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/4-JavaScript/1 基础/21-Global 单例内置对象.md","filePath":"markdown/1-前端/4-JavaScript/1 基础/21-Global 单例内置对象.md"}');
const _sfc_main = { name: "markdown/1-前端/4-JavaScript/1 基础/21-Global 单例内置对象.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="global-单例内置对象" tabindex="-1">Global 单例内置对象 <a class="header-anchor" href="#global-单例内置对象" aria-label="Permalink to &quot;Global 单例内置对象&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>在全局定义的变量和函数都会变成 <strong>Global</strong> 对象的属性</p><p><strong>Global</strong> 不能通过代码显示调用，但可以使用 <strong>window</strong> 对象作为代理</p><blockquote><p>可以在其他章节找到的 Global 方法和属性</p><ol><li><strong>isNaN()</strong>、<strong>isFinite()</strong>：<code>3-4-5 Number 类型</code></li><li><strong>parseInt()</strong>、<strong>parseFloat()</strong>：<code>3-4-6 String 类型</code></li></ol></blockquote><h2 id="url-编码方法" tabindex="-1">URL 编码方法 <a class="header-anchor" href="#url-编码方法" aria-label="Permalink to &quot;URL 编码方法&quot;">​</a></h2><p>用于编码统一资源标识符（URI），以便传给浏览器</p><ul><li><strong>encodeURI()</strong> 方法不会编码属于 <strong>URI</strong> 组件的特殊字符，如冒号、斜杠、问号、井号</li><li><strong>encodeURIComponent()</strong> 方法会编码所有除英文外的字符</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> uri</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;http://www.kingmusi.github.io/blog#aa a&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( </span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">encodeURI</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(uri) )          </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// http://www.kingmusi.github.io/blog#aa%20a</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( </span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">encodeURIComponent</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(uri) ) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// http%3A%2F%2Fwww.kingmusi.github.io%2Fblog%23aa%20a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>对于编码整个 <strong>URI</strong> 的情况，一般使用 <strong>encodeURI</strong></p><p>对于追加到已有 <strong>URI</strong> 后面的字符串编码情况，一般使用 <strong>encodeURIComponent</strong></p></blockquote><p>相应解码：<strong>decodeURI()</strong> 和 <strong>decodeURIcomponent()</strong></p><h2 id="eval-方法" tabindex="-1">eval() 方法 <a class="header-anchor" href="#eval-方法" aria-label="Permalink to &quot;eval() 方法&quot;">​</a></h2><p>十分强大，但影响性能，且会产生被 <strong>xss</strong> 攻击的漏洞</p><p><strong>eval</strong> 内的变量只能在 <strong>eval</strong> 自身的作用域使用，外面访问不到</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">eval</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;const a = &quot;a&quot;&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(a) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/4-JavaScript/1 基础/21-Global 单例内置对象.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _21Global_______ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _21Global_______ as default
};
