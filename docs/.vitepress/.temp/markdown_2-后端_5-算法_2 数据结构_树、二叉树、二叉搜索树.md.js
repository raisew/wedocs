import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"树、二叉树、二叉搜索树","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/2-后端/5-算法/2 数据结构/树、二叉树、二叉搜索树.md","filePath":"markdown/2-后端/5-算法/2 数据结构/树、二叉树、二叉搜索树.md"}');
const _sfc_main = { name: "markdown/2-后端/5-算法/2 数据结构/树、二叉树、二叉搜索树.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="树、二叉树、二叉搜索树" tabindex="-1">树、二叉树、二叉搜索树 <a class="header-anchor" href="#树、二叉树、二叉搜索树" aria-label="Permalink to &quot;树、二叉树、二叉搜索树&quot;">​</a></h1><h2 id="树" tabindex="-1">树 <a class="header-anchor" href="#树" aria-label="Permalink to &quot;树&quot;">​</a></h2><p><img src="https://gitee.com/kingmusi/imgs/raw/master/blog/20211116110856.png" alt=""></p><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>仅有<strong>唯一一个根节点</strong>，没有节点则为空树</li><li>除根节点外，每个节点都有并仅有<strong>唯一一个父节点</strong></li><li>节点间<strong>不能形成闭环</strong></li></ul><h4 id="深度和高度" tabindex="-1">深度和高度 <a class="header-anchor" href="#深度和高度" aria-label="Permalink to &quot;深度和高度&quot;">​</a></h4><ul><li>节点的深度：从根节点到该节点所经历的边的个数，如节点 B 的高度为 2</li><li>节点的高度 ：节点到叶节点的最长路径，如节点 B 的深度为 1</li><li>树的高度：根节点的高度</li></ul><h2 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h2><h4 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>最多仅有两个子节点的树</li></ul><h4 id="class-代码" tabindex="-1">class 代码 <a class="header-anchor" href="#class-代码" aria-label="Permalink to &quot;class 代码&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">public</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> class</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> TreeNode</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  public</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> int</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> val;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  public</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> TreeNode left, right;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  public</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> TreeNode</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">int</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}"> val</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">      this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.val </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> val;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">      this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.left </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> null</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">      this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.right </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> null</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="前中后序遍历" tabindex="-1">前中后序遍历 <a class="header-anchor" href="#前中后序遍历" aria-label="Permalink to &quot;前中后序遍历&quot;">​</a></h4><ul><li><p>前序遍历：根左右</p></li><li><p>中序遍历：左根右</p></li><li><p>后序遍历：左右根</p></li><li><p>递归代码</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">void</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> dfs</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(TreeNode root) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">		if</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (root</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">==</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">null</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">		dfs</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(root.left);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">		System.out.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">println</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(root.val);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">		dfs</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(root.right);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>逆推树：通过前（后）序找根节点，通过中序找左右节点</p><blockquote><p>前序遍历：FCADBEHGM 中序遍历：ACBDFHEMG</p><ol><li>根据前序知 F 是根节点，根据中序知 ACBD 是左子树，HEMG 是右子树</li><li>根据前序知 C 是左子树的根节点，根据中序知 A 是 C 的左节点，BD 是 C 的右子树</li><li>根据前序知 D 是右子树的根节点，根据中序知 B 是 D 的左节点</li><li>根节点的右子树同理</li></ol><p><img src="https://gitee.com/kingmusi/imgs/raw/master/blog/20211116113719.png" alt=""></p></blockquote><blockquote><p>中序遍历：ACBDFHEMG 后序遍历：ABDCHMGEF</p><ol><li><p>根据后序的最后一个值知 F 是根节点，根据中序知 ACBD 是左子树，HEMG 是右子树</p></li><li><p>根据后序找 ACBD 的顺序，得 ABDC，C 是最后一个节点，知其为左子树的根节点</p></li><li><p>根据中序知 A 是 C 的左节点，BD 是 C 的右子树</p></li><li><p>根据后序知 D 是根节点，根据中序知 B 是 D 的左节点</p></li><li><p>根节点的右子树同理</p></li><li><p>得到的树同上</p></li></ol></blockquote></li></ul><h2 id="二叉搜索树" tabindex="-1">二叉搜索树 <a class="header-anchor" href="#二叉搜索树" aria-label="Permalink to &quot;二叉搜索树&quot;">​</a></h2><h4 id="别称" tabindex="-1">别称 <a class="header-anchor" href="#别称" aria-label="Permalink to &quot;别称&quot;">​</a></h4><ul><li>有序二叉树</li><li>排序二叉树</li></ul><h4 id="特点-2" tabindex="-1">特点 <a class="header-anchor" href="#特点-2" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>左子树上<strong>所有结点</strong>的值均小于它的根结点的值</li><li>右子树上<strong>所有结点</strong>的值均大于它的根结点的值</li><li>左、右子树也分别为二叉查找树</li><li>中序遍历：升序排列</li></ul><h4 id="时间复杂度" tabindex="-1">时间复杂度 <a class="header-anchor" href="#时间复杂度" aria-label="Permalink to &quot;时间复杂度&quot;">​</a></h4><p>插入、删除、查询均为 O(logn)</p><h4 id="图解" tabindex="-1">图解 <a class="header-anchor" href="#图解" aria-label="Permalink to &quot;图解&quot;">​</a></h4><ul><li>查询 32</li></ul><p><img src="https://gitee.com/kingmusi/imgs/raw/master/blog/20211116114629.gif" alt=""></p><ul><li>插入 45</li></ul><p><img src="https://gitee.com/kingmusi/imgs/raw/master/blog/20211116114819.gif" alt=""></p><ul><li>删除 65</li></ul><p><img src="https://gitee.com/kingmusi/imgs/raw/master/blog/20211116114945.gif" alt=""></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/2-后端/5-算法/2 数据结构/树、二叉树、二叉搜索树.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const ___________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  ___________ as default
};
