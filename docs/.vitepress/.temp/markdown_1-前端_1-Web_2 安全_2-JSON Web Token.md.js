import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"JSON Web Token","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/1-Web/2 安全/2-JSON Web Token.md","filePath":"markdown/1-前端/1-Web/2 安全/2-JSON Web Token.md"}');
const _sfc_main = { name: "markdown/1-前端/1-Web/2 安全/2-JSON Web Token.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="json-web-token" tabindex="-1">JSON Web Token <a class="header-anchor" href="#json-web-token" aria-label="Permalink to &quot;JSON Web Token&quot;">​</a></h1><h2 id="组成部分" tabindex="-1">组成部分 <a class="header-anchor" href="#组成部分" aria-label="Permalink to &quot;组成部分&quot;">​</a></h2><h4 id="_1、header" tabindex="-1">1、Header <a class="header-anchor" href="#_1、header" aria-label="Permalink to &quot;1、Header&quot;">​</a></h4><ul><li><p>一般由两部分组成：<code>token 的类型</code>（“JWT”）和<code>算法名称</code>（比如：HMAC SHA256 或者 RSA 等等）</p></li><li><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">    &quot;alg&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;HS256&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">    &quot;typ&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;JWT&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>用<code>Base64</code>对这个JSON编码就得到JWT的第一部分</p></li></ul><h4 id="_2、payload" tabindex="-1">2、Payload <a class="header-anchor" href="#_2、payload" aria-label="Permalink to &quot;2、Payload&quot;">​</a></h4><ul><li><p>不敏感的数据</p></li><li><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">    &quot;id&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">    &quot;max-age&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">1600699968418</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>用<code>Base64</code>对这个JSON编码就得到JWT的第二部分</p></li></ul><h4 id="_3、signature" tabindex="-1">3、Signature <a class="header-anchor" href="#_3、signature" aria-label="Permalink to &quot;3、Signature&quot;">​</a></h4><ul><li><p>服务器端用私钥进行加密（签名），用于验证其他信息是否有被修改</p></li><li><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">HMACSHA256</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( </span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">base64UrlEncode</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(header) </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">+</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;.&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> +</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> base64UrlEncode</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(payload), secret)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p><code>HMACSHA256</code>：header头中的签名算法 <code>base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload)</code>：加密的内容 <code>secret</code>：私钥</p></blockquote></li><li><p>进行<code>签名算法</code>后的内容就得到JWT的第三部分</p></li></ul><blockquote><p><strong>最终 JWT 的组成格式</strong></p><p>Header.Payload.Signature</p></blockquote><h2 id="身份认证的过程" tabindex="-1">身份认证的过程 <a class="header-anchor" href="#身份认证的过程" aria-label="Permalink to &quot;身份认证的过程&quot;">​</a></h2><ol><li>用户携带用户名和密码请求访问</li><li>服务器校验用户凭据</li><li>应用提供一个 <strong>JWT</strong> 给客户端</li><li>客户端存储 <strong>JWT</strong>，并且在随后的每一次请求中都带着它</li><li>服务器校验 <strong>JWT</strong> 并返回数据 <ul><li>服务器端用私钥解密 <strong>JWT</strong>，如果解密后的数据格式是合法的，则证明数据没有被修改过</li></ul></li></ol><blockquote><ol><li>每次请求都需要 <strong>JWT</strong></li><li><strong>JWT</strong> 应该放在 <strong>header</strong> 中</li><li>服务器端需要设置接收来自所有域的请求，即<code>Access-Control-Allow-Origin: *</code></li></ol></blockquote><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ol><li>减轻服务器的内存压力 <ul><li>传统做法：一些用户信息需要保存在 <strong>session</strong> 中</li><li><strong>JWT</strong>：可以把用户信息放在 <strong>Payload</strong> 中，信息就放在客户端了</li></ul></li><li>安全：身份验证信息不再保存在 <strong>cookie</strong> 中，而是保存在客户端的内存中，这样关于 <strong>cookie</strong> 的攻击就不再生效了</li></ol></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/1-Web/2 安全/2-JSON Web Token.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _2JSON_Web_Token = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _2JSON_Web_Token as default
};
