import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"移动端布局","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/3-CSS/2 布局/2-移动端布局.md","filePath":"markdown/1-前端/3-CSS/2 布局/2-移动端布局.md"}');
const _sfc_main = { name: "markdown/1-前端/3-CSS/2 布局/2-移动端布局.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="移动端布局" tabindex="-1">移动端布局 <a class="header-anchor" href="#移动端布局" aria-label="Permalink to &quot;移动端布局&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>只使用于移动端，不同设备等比例缩放</p><h2 id="百分比布局" tabindex="-1">百分比布局 <a class="header-anchor" href="#百分比布局" aria-label="Permalink to &quot;百分比布局&quot;">​</a></h2><ul><li>通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果</li></ul><h5 id="百分比的基准" tabindex="-1">百分比的基准 <a class="header-anchor" href="#百分比的基准" aria-label="Permalink to &quot;百分比的基准&quot;">​</a></h5><table><thead><tr><th>值</th><th>基准</th></tr></thead><tbody><tr><td>width</td><td>父元素的width</td></tr><tr><td>height</td><td>父元素的height</td></tr><tr><td>top / bottom</td><td>第一个非 static 定位的父元素的height</td></tr><tr><td>left / right</td><td>第一个非 static 定位的父元素的width</td></tr><tr><td>padding / margin</td><td>父元素的width</td></tr><tr><td>border-radius</td><td>自身的width</td></tr><tr><td>translate</td><td>自身的width</td></tr></tbody></table><h2 id="rem-布局" tabindex="-1">rem 布局 <a class="header-anchor" href="#rem-布局" aria-label="Permalink to &quot;rem 布局&quot;">​</a></h2><ul><li><strong>rem</strong> 是基于根元素 <strong>html</strong> 的 <strong>font-size</strong> 来决定大小的</li></ul><h5 id="设计思想" tabindex="-1">设计思想 <a class="header-anchor" href="#设计思想" aria-label="Permalink to &quot;设计思想&quot;">​</a></h5><ol><li>一般不要给元素设置具体的宽度，但是对于一些小图标可以设定具体宽度值</li><li>高度值可以设置固定值，设计稿有多大，我们就严格有多大</li><li>所有设置的固定值都用 <strong>rem</strong> 做单位（首先在 <strong>HTML</strong> 总设置一个基准值：<strong>px</strong> 和 <strong>rem</strong> 的对应比例，然后在效果图上获取 <strong>px</strong> 值，布局的时候转化为 <strong>rem</strong> 值)</li><li><strong>js</strong> 获取真实屏幕的宽度，让其除以设计稿的宽度，算出比例，把之前的基准值按照比例进行重新的设定，这样项目就可以在移动端自适应了</li></ol><blockquote><p><strong>js改变根元素font-size</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> init</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> () </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">	let</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> width </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.documentElement.clientWidth;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">	document.documentElement.style.fontsize </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> width </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">/</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 10</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> +</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;px&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">//首次加载是计算</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">init</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">();</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">//添加监听，窗口发生变化时计算</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">window.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">addEventListener</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;resize&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, init);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">window.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">addEventListener</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;orientationchange&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, init);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></blockquote><p>一般设计图的单位为 <strong>px</strong>，可以通过 <strong>postcss-pxtorem</strong> 自动把代码中的 px 转换为 rem</p><h2 id="视口单位" tabindex="-1">视口单位 <a class="header-anchor" href="#视口单位" aria-label="Permalink to &quot;视口单位&quot;">​</a></h2><table><thead><tr><th>单位</th><th>含义</th></tr></thead><tbody><tr><td>vw</td><td>相对于视窗的宽度，1vw 等于视口宽度的1%，即视窗宽度是100vw</td></tr><tr><td>vh</td><td>相对于视窗的高度，1vh 等于视口高度的1%，即视窗高度是100vh</td></tr><tr><td>vmin</td><td>vw和vh中的较小值</td></tr><tr><td>vmax</td><td>vw和vh中的较大值</td></tr></tbody></table><p>一般设计图的单位为 <strong>px</strong>，可以通过 <strong>postcss-pxtovw</strong> 自动把代码中的 px 转换为 vw</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/3-CSS/2 布局/2-移动端布局.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _2______ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _2______ as default
};
