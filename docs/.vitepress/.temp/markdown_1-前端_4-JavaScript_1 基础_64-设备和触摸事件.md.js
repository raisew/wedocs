import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"设备和触摸事件","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/4-JavaScript/1 基础/64-设备和触摸事件.md","filePath":"markdown/1-前端/4-JavaScript/1 基础/64-设备和触摸事件.md"}');
const _sfc_main = { name: "markdown/1-前端/4-JavaScript/1 基础/64-设备和触摸事件.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="设备和触摸事件" tabindex="-1">设备和触摸事件 <a class="header-anchor" href="#设备和触摸事件" aria-label="Permalink to &quot;设备和触摸事件&quot;">​</a></h1><h2 id="设备事件" tabindex="-1">设备事件 <a class="header-anchor" href="#设备事件" aria-label="Permalink to &quot;设备事件&quot;">​</a></h2><h4 id="orientationchange" tabindex="-1">orientationchange <a class="header-anchor" href="#orientationchange" aria-label="Permalink to &quot;orientationchange&quot;">​</a></h4><ul><li><p><strong>ios</strong> 设备上适用</p></li><li><p>判断设备是处于垂直模式还是水平模式</p></li><li><p>在 <strong>window</strong> 上暴露了 <strong>orientation</strong> 属性。0 表示垂直模式，90 表示左转水平模式，-90 表示右转水平模式</p></li><li><p><strong>event</strong> 没有有用的属性</p></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">window.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">addEventListenter</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;orientationchange&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, () </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(window.orientation))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="deviceorientation" tabindex="-1">deviceorientation <a class="header-anchor" href="#deviceorientation" aria-label="Permalink to &quot;deviceorientation&quot;">​</a></h4><ul><li>获取设备的加速计信息</li><li>在 <strong>window</strong> 上触发</li><li>在 <strong>event</strong> 上有以下属性，反应设备静止时坐标值的变化</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>alpha</code></td><td>0~360 范围内的浮点值，表示围绕 z 轴旋转时 y 轴的度数</td></tr><tr><td><code>beta</code></td><td>-180~180 范围内的浮点值，表示围绕 x 轴旋转时 z 轴的度数</td></tr><tr><td><code>gemma</code></td><td>-90~90 范围内的浮点值，表示围绕 y 轴旋转时 z 轴的度数</td></tr><tr><td><code>absolute</code></td><td>布尔值，表示设备是否返回绝对值</td></tr><tr><td><code>compassCalibrated</code></td><td>布尔值，表示设备的指南针是否正确校准</td></tr></tbody></table><h4 id="devicemotion" tabindex="-1">devicemotion <a class="header-anchor" href="#devicemotion" aria-label="Permalink to &quot;devicemotion&quot;">​</a></h4><ul><li>提示设备实际上在移动，而不仅仅是改变了朝向</li><li>在 <strong>event</strong> 上有以下属性</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>acceleration</code></td><td>对象，包含x、y、z属性，反映不考虑重力情况下各个维度的加速信息</td></tr><tr><td><code>accelerationIncludingGravity</code></td><td>对象，包含x、y、z属性，反映各个维度的加速信息，包含z轴自然重力加速度</td></tr><tr><td><code>interval</code></td><td>毫秒，距离下次触发 <strong>devicemotion</strong> 事件的时间</td></tr><tr><td><code>rotationRate</code></td><td>对象，包含alpha、beta、gamma属性，表示设备朝向</td></tr></tbody></table><h2 id="触摸事件" tabindex="-1">触摸事件 <a class="header-anchor" href="#触摸事件" aria-label="Permalink to &quot;触摸事件&quot;">​</a></h2><h5 id="_1-触摸事件" tabindex="-1">1. 触摸事件 <a class="header-anchor" href="#_1-触摸事件" aria-label="Permalink to &quot;1. 触摸事件&quot;">​</a></h5><table><thead><tr><th>事件</th><th>说明</th></tr></thead><tbody><tr><td><code>touchstart</code></td><td>手指放到屏幕上时触发</td></tr><tr><td><code>touchmove</code></td><td>手指在屏幕上滑动时连续触发。调用 <strong>preventDefault</strong> 可以阻止滚动</td></tr><tr><td><code>touchend</code></td><td>手指在屏幕上移开时触发</td></tr></tbody></table><h5 id="_2-event" tabindex="-1">2. <strong>event</strong> <a class="header-anchor" href="#_2-event" aria-label="Permalink to &quot;2. **event**&quot;">​</a></h5><ul><li>鼠标事件公有属性 <ul><li><strong>bubbles</strong>、<strong>cancelable</strong>、<strong>view</strong>、<strong>clientX</strong>、<strong>clientY</strong>、<strong>screenX</strong>、<strong>screenY</strong>、<strong>detail</strong>、<strong>altKey</strong>、<strong>shiftKey</strong>、<strong>ctrlKey</strong>、<strong>metaKey</strong></li></ul></li><li>触点属性 <ul><li><strong>touches</strong>：<strong>Touch</strong> 对象的数组，表示当前屏幕上的每个触点</li><li><strong>targetTouches</strong>：<strong>Touch</strong> 对象的数组，表示特定于事件目标的触点</li><li><strong>changedTouches</strong>：<strong>Touch</strong> 对象的数组，表示自上次用户动作之后变化的触点</li></ul></li></ul><h5 id="_3-touch-对象" tabindex="-1">3. <strong>Touch</strong> 对象 <a class="header-anchor" href="#_3-touch-对象" aria-label="Permalink to &quot;3. **Touch** 对象&quot;">​</a></h5><ul><li><strong>clientX</strong>、<strong>clientY</strong>、<strong>pageX</strong>、<strong>pageY</strong>、<strong>screenX</strong>、<strong>screenY</strong></li><li><strong>identifier</strong>：触点 <strong>ID</strong></li><li><strong>target</strong>：触摸事件的时间目标</li></ul><h2 id="手势事件" tabindex="-1">手势事件 <a class="header-anchor" href="#手势事件" aria-label="Permalink to &quot;手势事件&quot;">​</a></h2><h5 id="_1-手势事件" tabindex="-1">1. 手势事件 <a class="header-anchor" href="#_1-手势事件" aria-label="Permalink to &quot;1. 手势事件&quot;">​</a></h5><table><thead><tr><th>事件</th><th>说明</th></tr></thead><tbody><tr><td><code>gesturestart</code></td><td>一个手指已经放在屏幕上，再把另一个手指放在屏幕上时触发</td></tr><tr><td><code>gesturechange</code></td><td>任何一个手指在屏幕上的位置发生变化时触发</td></tr><tr><td><code>gestureend</code></td><td>其中一个手指离开屏幕时触发</td></tr></tbody></table><h5 id="_2-event-1" tabindex="-1">2. <strong>event</strong> <a class="header-anchor" href="#_2-event-1" aria-label="Permalink to &quot;2. **event**&quot;">​</a></h5><ul><li>鼠标事件公有属性 <ul><li><strong>bubbles</strong>、<strong>cancelable</strong>、<strong>view</strong>、<strong>clientX</strong>、<strong>clientY</strong>、<strong>screenX</strong>、<strong>screenY</strong>、<strong>detail</strong>、<strong>altKey</strong>、<strong>shiftKey</strong>、<strong>ctrlKey</strong>、<strong>metaKey</strong></li></ul></li><li><strong>rotation</strong>：手指变化旋转的度数。负值表示逆时针旋转，正值表示顺时针旋转</li><li><strong>scale</strong>：两指之间距离变化的程度</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/4-JavaScript/1 基础/64-设备和触摸事件.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _64________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _64________ as default
};
