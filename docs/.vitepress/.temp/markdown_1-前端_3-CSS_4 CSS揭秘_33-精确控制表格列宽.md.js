import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"精确控制表格列宽","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/3-CSS/4 CSS揭秘/33-精确控制表格列宽.md","filePath":"markdown/1-前端/3-CSS/4 CSS揭秘/33-精确控制表格列宽.md"}');
const _sfc_main = { name: "markdown/1-前端/3-CSS/4 CSS揭秘/33-精确控制表格列宽.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="精确控制表格列宽" tabindex="-1">精确控制表格列宽 <a class="header-anchor" href="#精确控制表格列宽" aria-label="Permalink to &quot;精确控制表格列宽&quot;">​</a></h1><h2 id="困难产生原因" tabindex="-1">困难产生原因 <a class="header-anchor" href="#困难产生原因" aria-label="Permalink to &quot;困难产生原因&quot;">​</a></h2><p>表格元素的宽高很难预测，就算给其设置了宽高，也只是起到了一些作用，最终效果还是会随着内容改变而变化</p><p>也导致了浏览器制作表格十分消耗性能</p><p>如今我们是否能让表格行为更加可控呢？</p><h2 id="解决办法" tabindex="-1">解决办法 <a class="header-anchor" href="#解决办法" aria-label="Permalink to &quot;解决办法&quot;">​</a></h2><p>使用 <code>固定表格布局算法</code></p><p>对 <code>&lt;table&gt;</code> 或 <code>display: table</code> 的元素添加样式</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">table</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">    table-layout</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">fixed</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">; </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">/* 默认值是 auto，auto 就会出现上面所说的问题 */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">    width</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">100</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">%</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">; </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">/* 最好加一下，防止兼容性问题 */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>下面是添加了 <code>table-layout: fixed;</code> 的表格，上面列举了两者之间的比较</p><table><thead><tr><th>情况</th><th>auto</th><th>fixed</th></tr></thead><tbody><tr><td>不指定宽度</td><td>各列根据内容分配宽度</td><td>各列平均分配宽度</td></tr><tr><td>指定宽度</td><td>仅第一行参与到列宽的计算中</td><td>每一行都参与到列宽的计算中</td></tr><tr><td>指定的宽度相加超出总宽度</td><td>如有两个单元格，第一个单元格宽度为 1000px，第二个单元格宽度为 2000px，但外层容器远远不足 3000px，则单元格会按比例缩小，分别得到总宽度的 33.3% 和 66.6%</td><td>给单元个指定很大的宽度会生效，会溢出外层容器</td></tr><tr><td>禁止文本折行，text-overflow 是否生效</td><td>不生效，文本过长会导致单元格宽度变长</td><td>生效，如设置 text-overflow: ellipsis，文本过长部分换位省略号</td></tr><tr><td>大图片、代码块过长</td><td>导致单元格宽度变长</td><td>大图片、代码块会溢出单元格，但单元格宽度不变</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/kingmusi/blogImages/img/20210411164652.png" alt=""></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/3-CSS/4 CSS揭秘/33-精确控制表格列宽.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _33_________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _33_________ as default
};
