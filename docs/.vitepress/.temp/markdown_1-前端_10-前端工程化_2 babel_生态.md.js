import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"生态","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/10-前端工程化/2 babel/生态.md","filePath":"markdown/1-前端/10-前端工程化/2 babel/生态.md"}');
const _sfc_main = { name: "markdown/1-前端/10-前端工程化/2 babel/生态.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="生态" tabindex="-1">生态 <a class="header-anchor" href="#生态" aria-label="Permalink to &quot;生态&quot;">​</a></h1><h2 id="plugin" tabindex="-1">Plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;Plugin&quot;">​</a></h2><p>分为三类：</p><ol><li><code>@babel/plugin-transform-xx</code>：转换插件，语法转换（会自动启用对应的语法插件）</li><li><code>@babel/plugin-proposal-xx</code>：转换插件，指代那些对 <code>ES Proposal</code>（即还未被 <code>ECMA-262</code> 正式发布的特性）进行转换的插件，一旦正式发布后，名称就会被重名为 <code>@babel/plugin-transform-xx</code></li><li><code>@babel/plugin-syntax-xx</code>：语法插件，不需要单独配置，会被转换插件依赖，用于语法解析</li></ol><p><code>plugins</code> 会从前到后顺序执行，前一个 <code>plugin</code> 的处理结果，将作为下一个 <code>plugin</code> 的输入</p><h2 id="preset" tabindex="-1">Preset <a class="header-anchor" href="#preset" aria-label="Permalink to &quot;Preset&quot;">​</a></h2><p>一组官方推荐的预设插件的集合，可以理解为插件套餐，如：</p><ul><li><code>@babel/preset-env</code> for compiling ES2015+ syntax</li><li><code>@babel/preset-typescript</code> for TypeScript</li><li><code>@babel/preset-react</code> for React</li></ul><p><code>Preset</code> 会从后往前执行</p><p><code>Plugin</code> 会运行在 <code>Preset</code> 之前</p><h2 id="core-js" tabindex="-1">core-js <a class="header-anchor" href="#core-js" aria-label="Permalink to &quot;core-js&quot;">​</a></h2><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzloirock%2Fcore-js" target="_blank" rel="noreferrer">core-js</a> 是完全模块化的 <code>javascript</code> 标准库。 包含 <code>ECMA-262</code> 至今为止大部分特性的 <code>polyfill</code>，如 <code>promises、symbols、collections、iterators、typed arrays</code> 等。目前在用的版本是 <code>core-js@2</code>、<code>core-js@3</code>，其中不推荐使用 <code>v2</code>，因为 <code>v3</code> 支持更多特性的 <code>polyfill</code></p><p><code>core-js</code> 同时提供 3 个包</p><ol><li><p><code>core-js</code>：最常用的版本，引入整个 <code>core-js</code> 或部分特性，就会把所有或对应的 <code>polyfill</code>，直接扩展到代码运行的全局环境中（修改原型等方式），业务代码可直接使用最新的 <code>ES</code> 写法</p><ul><li>引入 <code>core-js</code> 即引入 <code>core-js/features</code>，<code>core-js/features</code> 里引入了全部的 <code>modules</code></li><li>若部分特性引入则用 <code>features</code> 命名空间就行</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;core-js&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">; </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">//全部引入</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;core-js/features/array/flat&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">; </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">//针对性引入（feature命名空间）</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">[</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, [</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">3</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">], [</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">4</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, [</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">5</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">]]].</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">flat</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">); </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// =&gt; [1, 2, 3, 4, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><code>core-js-pure</code>：类似一种工具函数，不会注入到全局环境，所以整体引入无效。在使用的时候需要单独引入并使用对应 <code>polyfill</code> 的 <code>module</code> 方法，不能直接使用最新 <code>ES</code> 的写法</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> flat </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;core-js-pure/features/array/flat&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">flat</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">([</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, [</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">3</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">], [</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">4</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, [</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">5</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">]]], </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">); </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// =&gt; [1, 2, 3, 4, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><code>core-js-bundle</code>：编译打包好的版本，包含全部的 <code>polyfill</code> 特性，适合在浏览器里面通过 <code>script</code> 直接加载</p></li></ol><p><code>core-js</code> 需安装在 <code>dependencies</code> 依赖里，并且通常情况不单独使用，要与 <code>babel</code> 集成</p><h2 id="regenerator-runtime" tabindex="-1">regenerator-runtime <a class="header-anchor" href="#regenerator-runtime" aria-label="Permalink to &quot;regenerator-runtime&quot;">​</a></h2><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Fregenerator%2Ftree%2Fmain%2Fpackages%2Fruntime" target="_blank" rel="noreferrer">regenerator-runtime</a> 模块来自 <code>facebook</code> 的 <code>regenerator</code> 模块。生成器函数、<code>async</code>、<code>await</code> 函数经 <code>babel</code> 编译后，<code>regenerator-runtime</code> 模块用于提供功能实现</p><h2 id="babel-preset-env" tabindex="-1">@babel/preset-env <a class="header-anchor" href="#babel-preset-env" aria-label="Permalink to &quot;@babel/preset-env&quot;">​</a></h2><p><code>@babel/preset-env</code> 是一个智能预设，集合了一系列常用插件，会根据 <code>browserslist</code>、<code>compat-table</code> 等设置的目标环境，自动将代码中的新特性转换成目标浏览器支持的代码</p><p>在 <code>@babel/preset-env</code> 7.15.8 版本依赖插件 <code>@babel/plugin-transform-regenerator</code>，该插件用于编译 <code>async</code> 和生成器。因为他依赖 <code>regenerator-transform-&gt;@babel/runtime-&gt;regenerator-runtime</code>，本质还是 <code>regenerator-runtime</code> 提供编译能力。故不需要格外安装 <code>regenerator-runtime</code>。</p><p>需要手动安装 <code>corejs</code></p><p><code>useBuiltIns</code> 的配置</p><ol><li><p><code>entry</code>：，需要在代码中手动引入 <code>polyfill</code> 包</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;core-js&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">; </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">//手动引入</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;regenerator-runtime/runtime&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">; </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">//手动引入</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> c</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> [</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">5</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">6</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">7</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">].</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">includes</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> d</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> async</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> () </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> e</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> await</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> a;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(e);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><code>usage</code>：会根据每个文件里面用到的 <code>ES 特性+target</code> 配置自动引入对应的 <code>polyfill</code></p></li><li><p><code>false</code>：不引入 <code>corejs</code> 的 <code>polyfill</code>，只会做语法转换</p></li></ol><h2 id="babel-runtime-系列" tabindex="-1">@babel/runtime 系列 <a class="header-anchor" href="#babel-runtime-系列" aria-label="Permalink to &quot;@babel/runtime 系列&quot;">​</a></h2><p><code>@babel/runtime</code> 系列包含以下三种：</p><ol><li><code>@babel/runtime</code></li><li><code>@babel/runtime-corejs2</code>：<code>@babel/runtime</code> + <code>core-js@2</code></li><li><code>@babel/runtime-corejs3</code>：<code>@babel/runtime</code> + <code>core-js-pure@3</code></li></ol><h2 id="babel-plugin-transform-runtime" tabindex="-1">@babel/plugin-transform-runtime <a class="header-anchor" href="#babel-plugin-transform-runtime" aria-label="Permalink to &quot;@babel/plugin-transform-runtime&quot;">​</a></h2><p>通过使用<code>@babel/runtime</code> 系列内部的模块来代替重复的 <code>helpers</code>、对全局空间有污染的 <code>core-js</code> 和 <code>regenerator-runtime</code> 相关变量：</p><ol><li>对 <code>Babel</code> 编译过程中各模块内重复产生的 <code>helper</code> 方法进行重新聚合（全部指向 <code>@babel/runtime/helpers</code> 这个 <code>module</code> 当中的辅助函数），以达到减少打包体积的目的.</li><li>避免全局补丁污染，对每个模块内提供&quot;沙箱&quot;式的补丁</li></ol><h2 id="babel-loader" tabindex="-1">babel-loader <a class="header-anchor" href="#babel-loader" aria-label="Permalink to &quot;babel-loader&quot;">​</a></h2><p><code>webpack</code> 中使用 <code>babel</code> 加载需要编译的文件，注意 <code>exclude</code> 和 <code>include</code> 的使用</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/10-前端工程化/2 babel/生态.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const __ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  __ as default
};
