import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"Audio 和 Video","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/2-HTML/2 HTML5/3-Audio和Video.md","filePath":"markdown/1-前端/2-HTML/2 HTML5/3-Audio和Video.md"}');
const _sfc_main = { name: "markdown/1-前端/2-HTML/2 HTML5/3-Audio和Video.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="audio-和-video" tabindex="-1">Audio 和 Video <a class="header-anchor" href="#audio-和-video" aria-label="Permalink to &quot;Audio 和 Video&quot;">​</a></h1><h2 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h2><ul><li><p>可以通过 <strong>audio</strong> 嵌入音频，通过 <strong>video</strong> 嵌入视频</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">audio</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> src</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;m.mp3&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#B31D28", "--shiki-dark": "#FDAEB7", "--shiki-light-font-style": "italic", "--shiki-dark-font-style": "italic" })}">/</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">video</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> src</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;m.mp4&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> width</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">320</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> height</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">400</span><span style="${ssrRenderStyle({ "--shiki-light": "#B31D28", "--shiki-dark": "#FDAEB7", "--shiki-light-font-style": "italic", "--shiki-dark-font-style": "italic" })}"> /</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>可以向标签中插入文本，用于浏览器不支持这两个标签时，显示提示文字</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">audio</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> src</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;m.mp3&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;您的浏览器不支持&lt;/</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">audio</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>由于浏览器对标准音频和视频的编解码支持并不一致，所以通常需要使用<code>&lt;source&gt;</code>元素来为指定不同格式的媒体源</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">audio</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt; </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">  &lt;!-- source 不用关闭--&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  &lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">source</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> src</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;m.mp3&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> type</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;audio/mpeg&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;   </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  &lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">source</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> src</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;m.ogg&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> type</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;audio/ogg;codec=&#39;vorbis&#39;&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  您的浏览器不支持</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;/</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">audio</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h5 id="公共的属性" tabindex="-1">公共的属性 <a class="header-anchor" href="#公共的属性" aria-label="Permalink to &quot;公共的属性&quot;">​</a></h5><table><thead><tr><th>标签名</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则在就绪后马上播放。</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件（比如播放/暂停按钮）。</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当结束时重新开始播放。</td></tr><tr><td>muted</td><td>muted</td><td>如果出现该属性，则输出静音。</td></tr><tr><td>preload</td><td>auto：页面加载后载入整个音频<br>metadata：假面加载后只载入元数据<br>none：无需加载数据</td><td>规定当网页加载时，是否默认被加载以及如何被加载。</td></tr><tr><td>src</td><td>url</td><td>文件的url</td></tr><tr><td>poster*（video 独有）*</td><td>url</td><td>视屏封面用一张图片替代</td></tr><tr><td>height*（video 独有）*</td><td>number</td><td>视频元素的高度</td></tr><tr><td>width*（video 独有）*</td><td>number</td><td>视频元素的宽度</td></tr></tbody></table><h2 id="使用-javascript-操控" tabindex="-1">使用 JavaScript 操控 <a class="header-anchor" href="#使用-javascript-操控" aria-label="Permalink to &quot;使用 JavaScript 操控&quot;">​</a></h2><h5 id="_1-创建-获取元素" tabindex="-1">1. 创建 / 获取元素 <a class="header-anchor" href="#_1-创建-获取元素" aria-label="Permalink to &quot;1. 创建 / 获取元素&quot;">​</a></h5><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 获取</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> audio </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">getElementById</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;audio&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 创建</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> audio </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> new</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> Audio</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;./成都.mp3&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> audio </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;audio&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>video 没有 new 方法</p></blockquote><h5 id="_2-只读属性" tabindex="-1">2. 只读属性 <a class="header-anchor" href="#_2-只读属性" aria-label="Permalink to &quot;2. 只读属性&quot;">​</a></h5><table><thead><tr><th>属性</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>duration</td><td>Float</td><td>整个媒体文件的播放时长，以秒为单位。如果无法获取时长，则返回 <strong>NaN</strong></td></tr><tr><td>paused</td><td>Boolean</td><td>如果媒体文件当前被暂停，则返回 <strong>true</strong>。如果还未开始播放，默认返回 <strong>true</strong></td></tr><tr><td>ended</td><td>Boolean</td><td>如果媒体文件已经播放完毕，则返回 <strong>true</strong></td></tr><tr><td>currentLoop</td><td>Integer</td><td>返回媒体已经播放的循环次数</td></tr><tr><td>currentSrc</td><td>String</td><td>返回当前正在播放或已加载的文件。对应 <strong>source</strong> 元素中选择的文件</td></tr><tr><td>seeking</td><td>Boolean</td><td>如果播放器正在跳到一个新的播放点，值为 <strong>true</strong></td></tr><tr><td>networkState</td><td>Integer</td><td>表示媒体当前网络连接状态。0 表示空，1 表示加载中，2 表示加载元数据，3 表示加载了第一帧，4 表示加载完成</td></tr><tr><td>readyState</td><td>Integer</td><td>表示媒体是否已经准备就绪。0 表示媒体不可用，1 表示可以显示当前帧，2 表示媒体可以开始播放，3 表示媒体可以从头播放到尾</td></tr><tr><td>played</td><td>TimeRanges</td><td>返回已经播放的时间段</td></tr><tr><td>buffered</td><td>TimeRanges</td><td>返回当前已经缓冲的时间段</td></tr><tr><td>seekable</td><td>TimeRanges</td><td>返回当前播放器需要跳到的时间段</td></tr></tbody></table><blockquote><p>TimeRanges 对象：包括一个或多个时间范围</p><ul><li>length：表示有多少个时间范围</li><li>start(index)：返回 index 对应的时间范围的开始时间</li><li>end(index)：返回 index 对应的时间范围的结束时间</li></ul></blockquote><h5 id="_3-可读写属性" tabindex="-1">3. 可读写属性 <a class="header-anchor" href="#_3-可读写属性" aria-label="Permalink to &quot;3. 可读写属性&quot;">​</a></h5><table><thead><tr><th>属性</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>autoplay</td><td>Boolean</td><td>取得或设置 <strong>autoplay</strong> 标签</td></tr><tr><td>controls</td><td>Boolean</td><td>取得或设置 <strong>controls</strong> 标签，用于显示或影藏浏览器内置控件</td></tr><tr><td>loop</td><td>Boolean</td><td>取得或设置媒体是否应该在播放完再循环开始</td></tr><tr><td>muted</td><td>Boolean</td><td>取得或设置媒体是否静音</td></tr><tr><td>start</td><td>Float</td><td>取得或设置媒体文件中的位置，以秒为单位，从该处开始播放</td></tr><tr><td>volume</td><td>Float</td><td>取得或设置当前音量，值为 <strong>0.0</strong> 带 <strong>1.0</strong></td></tr></tbody></table><h5 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>play()</td><td>播放</td></tr><tr><td>pause()</td><td>停止</td></tr><tr><td>load()</td><td>重新加载</td></tr></tbody></table><h5 id="事件监听" tabindex="-1">事件监听 <a class="header-anchor" href="#事件监听" aria-label="Permalink to &quot;事件监听&quot;">​</a></h5><table><thead><tr><th>type</th><th>触发时间点</th></tr></thead><tbody><tr><td>abort</td><td>播放中断时</td></tr><tr><td>play</td><td>开始播放时</td></tr><tr><td>pause</td><td>暂停播放时</td></tr><tr><td>loadedmetadata</td><td>获取完媒体的元数据时</td></tr><tr><td>ended</td><td>播放结束时</td></tr></tbody></table></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/2-HTML/2 HTML5/3-Audio和Video.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _3Audio_Video = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _3Audio_Video as default
};
