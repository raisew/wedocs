import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"Python 基础语法","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/2-后端/4-Python/1 基础/1-Python 基础语法.md","filePath":"markdown/2-后端/4-Python/1 基础/1-Python 基础语法.md"}');
const _sfc_main = { name: "markdown/2-后端/4-Python/1 基础/1-Python 基础语法.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="python-基础语法" tabindex="-1">Python 基础语法 <a class="header-anchor" href="#python-基础语法" aria-label="Permalink to &quot;Python 基础语法&quot;">​</a></h1><h2 id="字符串的修饰" tabindex="-1">字符串的修饰 <a class="header-anchor" href="#字符串的修饰" aria-label="Permalink to &quot;字符串的修饰&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">center</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.center( [共字符数], [填充字符] )<br>作用：让字符串在指定的长度居中。如果不能居中，则会左短右长，可以指定填充字符，默认空格</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">ljust</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.ljust( [共字符数], [填充字符] )<br>作用：让字符串在指定的长度向左对齐。可以指定填充字符，默认空格</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">rjust</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.rjust( [共字符数], [填充字符] )<br>作用：让字符串在指定的长度向右对齐。可以指定填充字符，默认空格</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">zfill</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.zfill(共字符数)<br>作用：将字符串填充到指定长度，不足地方用0从左开始补充</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">strip</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.strip(去除内容)<br>作用：默认去除两边的内容，去除内容可以指定</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">rstrip</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.strip(去除内容)<br>作用：默认去除右边的内容，去除内容可以指定</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">lstrip</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.strip(去除内容)<br>作用：默认去除左边的内容，去除内容可以指定</td></tr></tbody></table><h2 id="字符串的查找" tabindex="-1">字符串的查找 <a class="header-anchor" href="#字符串的查找" aria-label="Permalink to &quot;字符串的查找&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">count</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.count(要查找的字符，开始的位置，结束的位置)<br>作用：返回自定字符在字符串当中的个数，start的默认位置为0，end默认位置为最后（start，end可以不打）</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">find</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.find(要检索的字符，开始的位置，结束的位置)<br>作用：返回从左第一个指定字符的索引，找不到返回-1</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">rfind</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.rfind(要检索的字符，开始的位置，结束的位置)<br>作用：返回从右第一个指定字符的索引，找不到返回-1</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">index</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.index(要检索的字符，开始的位置，结束的位置)<br>作用：返回从左第一个指定字符的索引，找不到报错</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">rindex</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.rindex(要检索的字符，开始的位置，结束的位置)<br>作用：返回从右第一个指定字符的索引，找不到报错</td></tr></tbody></table><h2 id="字符串的替换" tabindex="-1">字符串的替换 <a class="header-anchor" href="#字符串的替换" aria-label="Permalink to &quot;字符串的替换&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">replace</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.replace(将被替换的子字符串，新字符串，被替换次数)<br>作用：从左到右替换指定的元素，可以制定替换的个数，默认全部替换</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">translate</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.translate(由maketrans翻译的词典)<br>作用：按照对应关系来替换内容<br>注:from string import maketransmaketrans (被替换内容，替换内容)</td></tr></tbody></table><h2 id="字符串的变形" tabindex="-1">字符串的变形 <a class="header-anchor" href="#字符串的变形" aria-label="Permalink to &quot;字符串的变形&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">upper</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.upper()<br>作用：将字符串当中所有的字母转换为大写</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">lower</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.lower()<br>作用：将字符串当中所有的字母转换为小写</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">swapcase</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.swapcase ()<br>作用：将字符串当中所有的字母大小写互换</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">title</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.title ()<br>作用：将字符串当中的单词首字母大写，单词以空格划分</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">capitalize</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.capitalize ()<br>作用：将字符串首字母大写</td></tr></tbody></table><h2 id="字符串的判断" tabindex="-1">字符串的判断 <a class="header-anchor" href="#字符串的判断" aria-label="Permalink to &quot;字符串的判断&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">isalnum</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.isalnum()<br>作用：判断字符串是否完全由字母和数字组成返回值：Ture False</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">isalpha</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.isalpha()<br>作用：判断字符串是否完全由字母组成返回值：Ture False</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">isdigit</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.isdigit()<br>作用：判断字符串是否完全由数字组成返回值：Ture False</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">isupper</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.isupper()<br>作用：判断字符串当中的字母是否完全是大写返回值：Ture False</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">islower</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.islower()<br>作用：判断字符串当中的字母是否完全是小写返回值：Ture False</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">Istitle</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.istitle()<br>作用：判断字符串所有的单词拼写首字母是否为大写返回值：Ture False</td></tr></tbody></table><h2 id="字符串的切分" tabindex="-1">字符串的切分 <a class="header-anchor" href="#字符串的切分" aria-label="Permalink to &quot;字符串的切分&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">splitlines</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.splitlines()<br>作用：以行切分字符串，可以（1）指定是否保留行标志</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">split</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.split()<br>作用：从左开始切分字符串，可以指定切分对象和切分次数，默认对象为空格</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">rsplit</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.rsplit()<br>作用：从右开始切分字符串，可以指定切分对象和切分次数，默认对象为空格</td></tr></tbody></table><h2 id="字符串的拼接" tabindex="-1">字符串的拼接 <a class="header-anchor" href="#字符串的拼接" aria-label="Permalink to &quot;字符串的拼接&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">join</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.join(字符串)<br>作用：将指定的字符串插入到后面的序列的每两个元素之间，进行拼接，形成一个新的字符串</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">+</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串+字符串<br>作用：将两个字符串拼接</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">*</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串n<br>作用：将字符串重复</td></tr></tbody></table><h2 id="字符串的编码" tabindex="-1">字符串的编码 <a class="header-anchor" href="#字符串的编码" aria-label="Permalink to &quot;字符串的编码&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">encode</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.encode(转码的类型)<br>作用：将指定的字符串转码</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">decode</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.decode(解码的类型)<br>作用：将指定的字符串解码</td></tr></tbody></table><h2 id="赋值方式" tabindex="-1">赋值方式 <a class="header-anchor" href="#赋值方式" aria-label="Permalink to &quot;赋值方式&quot;">​</a></h2><ol><li>直接赋值：</li></ol><ul><li>如： a = 1</li></ul><ol start="2"><li>链式赋值：</li></ol><ul><li>如： a = b = 1</li></ul><ol start="3"><li>序列解包赋值：</li></ol><ul><li>如： a,b = 1,2</li></ul><h2 id="列表的索引" tabindex="-1">列表的索引 <a class="header-anchor" href="#列表的索引" aria-label="Permalink to &quot;列表的索引&quot;">​</a></h2><ol><li><p>建立列表的方式</p><ul><li>range() —— 数字</li><li>list() —— 字符串</li></ul></li><li><p>列表的索引可以被修改、删除</p></li></ol><h2 id="列表的排序" tabindex="-1">列表的排序 <a class="header-anchor" href="#列表的排序" aria-label="Permalink to &quot;列表的排序&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">reverse</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字符串.reverse()<br>作用：索引顺序倒序</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">sort</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字符串.sort()<br>作用：按照ascii码顺序进行排序</td></tr></tbody></table><h2 id="字典" tabindex="-1">字典 <a class="header-anchor" href="#字典" aria-label="Permalink to &quot;字典&quot;">​</a></h2><h5 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h5><ol><li><p>因为字典是无序的，所以字典没有索引值</p></li><li><p>字典以键取值，且键唯一不可修改</p></li><li><p>字典键不可重复</p></li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">dict</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">zip</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;hello&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;12345&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>结果：‘h’：1 ， ‘e’：2 ，‘l’：4 ，‘o’：5</p><ol start="4"><li>字典以键取值</li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">Example </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">dict</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">zip</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;hello&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;12345&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)))</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">print</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(Example[</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;e&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>结果：2</p><h5 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h5><ol><li>取值</li></ol><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">keys</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字典.keys()<br>作用：获取字典所有的键</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">values</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字典.values()<br>作用：获取字典所有的值</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">get</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字典.get(键,返回值)<br>作用：以键取值，如果指定的键不存在，返回None，可以指定返回值</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">update</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字典.update(键 = 内容)<br>作用：更新键的内容，如果键不存在，则创建一个新的键注：键不用打引号</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">Satdefault</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字典.satdefault(键)<br>作用：如果键存在，则返回值。如果键不存在，则创建新键，并且值为none，值可以被定义</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">items</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字典.items()<br>作用：返回元组方式</td></tr></tbody></table><ol start="2"><li>删除</li></ol><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">pop</th><th style="${ssrRenderStyle({ "text-align": "left" })}">字典.pop(键)<br>作用：返回并删除对应键的值</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">popitem</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字典.popitem(键)<br>作用：随见返回并删除一组键值元组</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">clear</td><td style="${ssrRenderStyle({ "text-align": "left" })}">字典.clear(键)<br>作用：清空字典</td></tr></tbody></table><ol start="3"><li>判断</li></ol><p><code>copy</code>：key in 字典</p><p>作用：如果存在，则返回True，如果不存在，则返回Flase</p><h2 id="运算和流程控制" tabindex="-1">运算和流程控制 <a class="header-anchor" href="#运算和流程控制" aria-label="Permalink to &quot;运算和流程控制&quot;">​</a></h2><ol><li><p>自增运算</p><ul><li>+= -= *= /=</li><li>注：没有 ++ 和 –</li></ul></li><li><p>比较运算</p></li></ol><ul><li><p>&gt;</p></li><li><p>&lt;</p></li><li><p>==</p></li><li><p>&gt;=</p></li><li><p>&lt;=</p></li><li><p>!= &lt;&gt;</p></li></ul><ol start="3"><li>逻辑运算</li></ol><ul><li><p>and 且</p></li><li><p>or 或</p></li><li><p>not 非</p></li><li><p>优先级：非 且 或</p></li></ul><ol start="4"><li>for循环</li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">for</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> in</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> 结构:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">	for</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> 变量  </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">in</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> 可迭代对象（序列）:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">		block循环语句</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/2-后端/4-Python/1 基础/1-Python 基础语法.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _1Python_____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _1Python_____ as default
};
