import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"视口 Viewport","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/4-JavaScript/5 移动端/视口 Viewport.md","filePath":"markdown/1-前端/4-JavaScript/5 移动端/视口 Viewport.md"}');
const _sfc_main = { name: "markdown/1-前端/4-JavaScript/5 移动端/视口 Viewport.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="视口-viewport" tabindex="-1">视口 Viewport <a class="header-anchor" href="#视口-viewport" aria-label="Permalink to &quot;视口 Viewport&quot;">​</a></h1><h2 id="viewport" tabindex="-1">viewport <a class="header-anchor" href="#viewport" aria-label="Permalink to &quot;viewport&quot;">​</a></h2><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">meta</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> name</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;viewport&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> content</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>width</strong>：控制 <strong>viewport</strong> 的宽度，可以指定的一个值，如 600，或者特殊的值，如 <strong>device-width</strong> 为设备的宽度</li><li><strong>height</strong>：设置 <strong>viewport</strong> ⾼度，⼀般设置了宽度，会⾃动解析出⾼度，可以不⽤设置</li><li><strong>initial-scale</strong>：初始缩放比例 <ul><li><code>视口大小 / 显示大小</code>，如<strong>initial-scale=0.5</strong>，移动端的视口宽为<strong>375px</strong>，但<strong>body</strong>宽为<strong>750px</strong>，看上去会缩小很多</li></ul></li><li><strong>maximum-scale</strong>：允许用户缩放到的最大比例</li><li><strong>minimum-scale</strong>：允许用户缩放到的最小比例</li><li><strong>user-scalable</strong>：用户是否可以手动缩放，默认可以，<strong>no</strong>为不可以</li></ul><blockquote><ol><li>使宽为视口宽，和初始缩放为<strong>1</strong>，显示结果是一样的</li><li>用户不可以手动缩放，和允许用户缩放的最大、最小比例都为1，结果是一样的</li><li>但为了兼容性，一般都写上，所以下面是标准写法</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">meta</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> name</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;viewport&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> content</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1. user-scalable=no&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></blockquote><h2 id="js-获取视口宽" tabindex="-1">JS 获取视口宽 <a class="header-anchor" href="#js-获取视口宽" aria-label="Permalink to &quot;JS 获取视口宽&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 1</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">window.innerWidth</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 2</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">document.documentElement.clientWidth</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 3</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">document.documentElement.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">getBoundingClientRect</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">().width</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 兼容写法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> viewWidth</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.documentElement.clientWidth </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">||</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> window.innerWidth</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="怎样处理移动端-1px-被渲染成-2px-问题" tabindex="-1">怎样处理移动端 1px 被渲染成 2px 问题 <a class="header-anchor" href="#怎样处理移动端-1px-被渲染成-2px-问题" aria-label="Permalink to &quot;怎样处理移动端 1px 被渲染成 2px 问题&quot;">​</a></h2><p><strong>局部处理</strong></p><ol><li><strong>mate</strong>标签中的 <strong>viewport</strong>属性 ， <strong>initial-scale</strong> 设置为 <strong>1</strong></li><li><strong>rem</strong> 按照设计稿标准⾛，外加利⽤ <strong>transfrom</strong> 的 <strong>scale(0.5)</strong> 缩⼩⼀倍即可；</li></ol><p><strong>全局处理</strong></p><ol><li><strong>mate</strong>标签中的 <strong>viewport</strong> 属性 ， <strong>initial-scale</strong> 设置为 <strong>0.5</strong></li><li><strong>rem</strong> 按照设计稿标准⾛即</li></ol></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/4-JavaScript/5 移动端/视口 Viewport.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const ___Viewport = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  ___Viewport as default
};
