import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"DOM 节点","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/4-JavaScript/1 基础/47-DOM 节点.md","filePath":"markdown/1-前端/4-JavaScript/1 基础/47-DOM 节点.md"}');
const _sfc_main = { name: "markdown/1-前端/4-JavaScript/1 基础/47-DOM 节点.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="dom-节点" tabindex="-1">DOM 节点 <a class="header-anchor" href="#dom-节点" aria-label="Permalink to &quot;DOM 节点&quot;">​</a></h1><h2 id="文档元素-documentelement" tabindex="-1">文档元素 documentElement <a class="header-anchor" href="#文档元素-documentelement" aria-label="Permalink to &quot;文档元素 documentElement&quot;">​</a></h2><ul><li>文档最外层元素，根节点 <code>&lt;html&gt;</code> 元素</li><li>每个文档只有一个文档元素</li></ul><h2 id="节点" tabindex="-1">节点 <a class="header-anchor" href="#节点" aria-label="Permalink to &quot;节点&quot;">​</a></h2><p>所有节点都继承 <strong>Node</strong> 类型</p><h5 id="_1-nodetype-节点类型" tabindex="-1">1. nodeType 节点类型 <a class="header-anchor" href="#_1-nodetype-节点类型" aria-label="Permalink to &quot;1. nodeType 节点类型&quot;">​</a></h5><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">常量</th><th style="${ssrRenderStyle({ "text-align": "left" })}">值</th><th style="${ssrRenderStyle({ "text-align": "left" })}">描述</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>Node.ELEMENT_NODE</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">1</td><td style="${ssrRenderStyle({ "text-align": "left" })}">一个元素节点，例如 <code>&lt;p&gt;</code> 和 <code>&lt;div&gt;</code></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>Node.TEXT_NODE</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">3</td><td style="${ssrRenderStyle({ "text-align": "left" })}">实际的文字</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>Node.CDATA_SECTION_NODE</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">4</td><td style="${ssrRenderStyle({ "text-align": "left" })}">一个 <strong>CDATASection</strong>，例如 <code>&lt;!CDATA[[ … ]]&gt;</code></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>Node.PROCESSING_INSTRUCTION_NODE</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">7</td><td style="${ssrRenderStyle({ "text-align": "left" })}">一个用于 XML 文档的 ProcessingInstruction (en-US) ，例如 <code>&lt;?xml-stylesheet ... ?&gt;</code> 声明</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>Node.COMMENT_NODE</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">8</td><td style="${ssrRenderStyle({ "text-align": "left" })}">一个 <strong>Comment</strong> 节点</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>Node.DOCUMENT_NODE</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">9</td><td style="${ssrRenderStyle({ "text-align": "left" })}">一个 <strong>Document</strong> 节点</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>Node.DOCUMENT_TYPE_NODE</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">10</td><td style="${ssrRenderStyle({ "text-align": "left" })}">描述文档类型的 <strong>DocumentType</strong> 节点。例如 <code>&lt;!DOCTYPE html&gt;</code> 就是用于 <strong>HTML5</strong> 的</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>Node.DOCUMENT_FRAGMENT_NODE</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">11</td><td style="${ssrRenderStyle({ "text-align": "left" })}">一个 <strong>DocumentFragment</strong> 节点</td></tr></tbody></table><h5 id="_2-nodename-标签名" tabindex="-1">2. nodeName 标签名 <a class="header-anchor" href="#_2-nodename-标签名" aria-label="Permalink to &quot;2. nodeName 标签名&quot;">​</a></h5><h2 id="节点关系" tabindex="-1">节点关系 <a class="header-anchor" href="#节点关系" aria-label="Permalink to &quot;节点关系&quot;">​</a></h2><h5 id="_1-子节点" tabindex="-1">1. 子节点 <a class="header-anchor" href="#_1-子节点" aria-label="Permalink to &quot;1. 子节点&quot;">​</a></h5><ul><li><strong>childNodes</strong>：获取一个节点的所有子节点，需要注意其是一个类数组</li><li><strong>firstChild</strong>：获取一个节点的第一个子节点</li><li><strong>lastChild</strong>：获取一个节点的最后一个子节点</li></ul><h5 id="_2-父节点" tabindex="-1">2. 父节点 <a class="header-anchor" href="#_2-父节点" aria-label="Permalink to &quot;2. 父节点&quot;">​</a></h5><ul><li><strong>parentNode</strong>：获取一个节点的父节点</li></ul><h5 id="_3-兄弟节点" tabindex="-1">3. 兄弟节点 <a class="header-anchor" href="#_3-兄弟节点" aria-label="Permalink to &quot;3. 兄弟节点&quot;">​</a></h5><ul><li><strong>previousSibling</strong>：获取一个节点的前一个兄弟节点，如果节点是第一个，则这属性为 null</li><li><strong>nextSibling</strong>：获取一个节点的后一个兄弟节点，如果节点是最后一个，则这属性为 null</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kingmusi/blogImages/img/20210506160109.png" alt=""></p><blockquote><p>所有节点还有些关系便利的属性和方法</p><ul><li><strong>hasChildNodes()</strong>：判断节点是否有子节点，有则返回 true</li><li><strong>ownerDocument</strong>：指向代表整个文档的文档节点指针</li></ul></blockquote><h2 id="忽略文本节点的关系" tabindex="-1">忽略文本节点的关系 <a class="header-anchor" href="#忽略文本节点的关系" aria-label="Permalink to &quot;忽略文本节点的关系&quot;">​</a></h2><p>代码中的空白，其实是一个文本节点，其是一个换行符，如下例子</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">	&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">span</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;&lt;/</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">span</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;/</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> div</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">getElementsByTagName</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;div&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)[</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(div.childNodes)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// text: { nodeValue: &quot;↵        &quot; }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// span</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// text: { nodeValue: &quot;↵    &quot; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>DOM</strong> 是还有 5 个属性，可以忽略这些文本节点</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>childElementCount</code></td><td>返回子元素数量，不包括文本节点和注释</td></tr><tr><td><code>firstElementChild</code></td><td>指向第一个 <strong>Element</strong> 类型的子元素</td></tr><tr><td><code>lastElementChild</code></td><td>指向最后一个 <strong>Element</strong> 类型的子元素</td></tr><tr><td><code>previousElementSibling</code></td><td>指向前一个 <strong>Element</strong> 类型的兄弟元素</td></tr><tr><td><code>nextElementSibling</code></td><td>指向后一个 <strong>Element</strong> 类型的兄弟元素</td></tr></tbody></table><blockquote><p>此节对应书 <strong>15.2</strong></p></blockquote><h2 id="操纵节点" tabindex="-1">操纵节点 <a class="header-anchor" href="#操纵节点" aria-label="Permalink to &quot;操纵节点&quot;">​</a></h2><h5 id="_1-appendchild-向节点的-childnodes-列表末尾添加节点" tabindex="-1">1. <code>appendChild()</code>：向节点的 <strong>childNodes</strong> 列表末尾添加节点 <a class="header-anchor" href="#_1-appendchild-向节点的-childnodes-列表末尾添加节点" aria-label="Permalink to &quot;1. \`appendChild()\`：向节点的 **childNodes** 列表末尾添加节点&quot;">​</a></h5><ul><li>返回新添加的节点</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">parentNode.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">appendChild</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( node )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2-insertbefore-把插入节点变成参照节点的前一个同胞节点" tabindex="-1">2. <code>insertBefore()</code>：把插入节点变成参照节点的前一个同胞节点 <a class="header-anchor" href="#_2-insertbefore-把插入节点变成参照节点的前一个同胞节点" aria-label="Permalink to &quot;2. \`insertBefore()\`：把插入节点变成参照节点的前一个同胞节点&quot;">​</a></h5><ul><li>参数：要插入的节点和参照节点</li><li>返回：返回插入的节点</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">parentNode.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">insertBefore</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( newNode, node )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_3-replacechild-要替换的节点用要插入的节点取而代之" tabindex="-1">3. <code>replaceChild()</code>：要替换的节点用要插入的节点取而代之 <a class="header-anchor" href="#_3-replacechild-要替换的节点用要插入的节点取而代之" aria-label="Permalink to &quot;3. \`replaceChild()\`：要替换的节点用要插入的节点取而代之&quot;">​</a></h5><ul><li>参数：要插入的几点，要替换的节点</li><li>返回：要替换的节点</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">parentNode.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">replaceChild</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( newNode, oldNode )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_4-removechild-移除节点" tabindex="-1">4. <code>removeChild()</code>：移除节点 <a class="header-anchor" href="#_4-removechild-移除节点" aria-label="Permalink to &quot;4. \`removeChild()\`：移除节点&quot;">​</a></h5><ul><li>参数：要移除的节点</li><li>返回：移除的节点</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">parentNode.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">removeChild</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( node )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_5-clonenode-克隆节点" tabindex="-1">5. <code>cloneNode()</code>：克隆节点 <a class="header-anchor" href="#_5-clonenode-克隆节点" aria-label="Permalink to &quot;5. \`cloneNode()\`：克隆节点&quot;">​</a></h5><ul><li>参数：布尔值，表示是否要深克隆</li><li>返回：克隆后的节点</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">cloneNode</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="element-类型" tabindex="-1">Element 类型 <a class="header-anchor" href="#element-类型" aria-label="Permalink to &quot;Element 类型&quot;">​</a></h2><h5 id="_1-特征" tabindex="-1">1. 特征 <a class="header-anchor" href="#_1-特征" aria-label="Permalink to &quot;1. 特征&quot;">​</a></h5><ul><li><strong>nodeType</strong> 等于 1</li><li><strong>nodeName</strong> 值为元素标签名</li></ul><blockquote><p>可以通过 <strong>nodeName</strong> 和 <strong>tagName</strong> 获取元素标签名，两个值是一样的，注意返回的是<strong>大写形式</strong></p></blockquote><h5 id="_2-标准属性" tabindex="-1">2. 标准属性 <a class="header-anchor" href="#_2-标准属性" aria-label="Permalink to &quot;2. 标准属性&quot;">​</a></h5><ul><li>所有 <strong>HTML</strong> 元素都有的特性</li><li>可以读写这些特性</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><strong>id</strong></td><td>元素在文档中的唯一标识符</td></tr><tr><td><strong>title</strong></td><td>包含元素的额外信息，鼠标在元素上时，会显示此信息</td></tr><tr><td><strong>lang</strong></td><td>元素内容的语言代码</td></tr><tr><td><strong>dir</strong></td><td>语言的书写方向</td></tr><tr><td><strong>className</strong></td><td>相当于 <strong>class</strong> 属性</td></tr></tbody></table><h5 id="_3-获取、设置和删除属性" tabindex="-1">3. 获取、设置和删除属性 <a class="header-anchor" href="#_3-获取、设置和删除属性" aria-label="Permalink to &quot;3. 获取、设置和删除属性&quot;">​</a></h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>getAttribute()</code></td><td>获取属性</td></tr><tr><td><code>setAttribute()</code></td><td>设置属性</td></tr><tr><td><code>removeAttribute()</code></td><td>删除属性</td></tr></tbody></table><blockquote><p><strong>HTML5</strong> 规范建议自定义属性以 <strong>data-</strong> 为前缀，这样就可以通过 <strong>dataset</strong> 获取和定义这些自定义属性</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> div</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">getElementsByTagName</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;div&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)[</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">]</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">div.dataset.id </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 1</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(div.dataset.id)              </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 1</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(div.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">getAttribute</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;data-id&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><h2 id="使节点进入视口" tabindex="-1">使节点进入视口 <a class="header-anchor" href="#使节点进入视口" aria-label="Permalink to &quot;使节点进入视口&quot;">​</a></h2><ul><li><p>滚动浏览器窗口或容器元素，使某个元素进入视口</p></li><li><p><code>scrollIntoView()</code>的参数</p><ul><li><p><code>alignToTop</code>：布尔值</p><ul><li><strong>true</strong>：窗口滚动后元素的顶部与视口顶部对齐</li><li><strong>false</strong>：窗口滚动后元素的底部与视口底部对齐</li></ul></li><li><p><code>scrollIntoViewOptions</code>：选项对象</p><ul><li><strong>behavior</strong>：定义过渡动画，可取值为 <strong>smooth</strong> 和 <strong>auto</strong>，默认为 <strong>auto</strong></li><li><strong>block</strong>：定义垂直方向的对齐，可取值为 <strong>start</strong>、<strong>center</strong>、<strong>end</strong>、<strong>nearest</strong>，默认值为 <strong>start</strong></li><li><strong>inline</strong>：定义水平方向的对齐，可取值为 <strong>start</strong>、<strong>center</strong>、<strong>end</strong>、<strong>nearest</strong>，默认值为 <strong>start</strong></li></ul></li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">document.forms[</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">].</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">scrollIntoView</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">document.forms[</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">].</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">scrollIntoView</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">({ behavior: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;smooth&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, block: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;center&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="节点比较" tabindex="-1">节点比较 <a class="header-anchor" href="#节点比较" aria-label="Permalink to &quot;节点比较&quot;">​</a></h2><ul><li><code>isSameNode()</code>：比较两节点是否相同，即这两个节点的指向是否相同</li><li><code>isEqualNode()</code>：比较两节点是否相等，即属性相等（nodeName，nodeValue等），而且 <strong>attribute</strong>、<strong>childNodes</strong> 也相等</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> div1</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;div1&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">      div2</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;div2&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">div1.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">setAttribute</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;name&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;div&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">div2.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">setAttribute</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;name&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;div&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( div1.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">isSameNode</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(div2) )  </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// false</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">console.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( div1.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">isEqualNode</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(div2) ) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/4-JavaScript/1 基础/47-DOM 节点.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _47DOM___ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _47DOM___ as default
};
