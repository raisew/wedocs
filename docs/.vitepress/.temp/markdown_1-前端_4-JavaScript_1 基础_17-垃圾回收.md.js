import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"垃圾回收","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/1-前端/4-JavaScript/1 基础/17-垃圾回收.md","filePath":"markdown/1-前端/4-JavaScript/1 基础/17-垃圾回收.md"}');
const _sfc_main = { name: "markdown/1-前端/4-JavaScript/1 基础/17-垃圾回收.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h1><blockquote><p>以下是 <strong>v8引擎</strong> 的实现</p></blockquote><h2 id="v8-的内存结构" tabindex="-1">V8 的内存结构 <a class="header-anchor" href="#v8-的内存结构" aria-label="Permalink to &quot;V8 的内存结构&quot;">​</a></h2><ul><li><code>新生代(new_space)</code> ：大多数的对象开始被分配的地方，这个区域相对较小但是垃圾回收特别频繁，该区域被分为两半，一半用来分配内存，另一半用于在垃圾回收时将需要保留的对象复制过来</li><li><code>老生代(old_space)</code> ：新生代中的对象在存活一段时间后就会被转移到老生代内存区，相对于新生代该内存区域的垃圾回收频率较低</li><li><code>大对象区(large_object_space)</code>：存放体积超越其他区域大小的对象，每个对象都会有自己的内存，垃圾回收不会移动大对象区</li><li><code>代码区(code_space)</code>：代码对象，会被分配在这里，唯一拥有执行权限的内存区域</li><li><code>map区(map_space)</code>：存放Cell和Map</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kingmusi/blogImages/img/202204012035146.png" alt=""></p><h2 id="新生代" tabindex="-1">新生代 <a class="header-anchor" href="#新生代" aria-label="Permalink to &quot;新生代&quot;">​</a></h2><p>采用 <code>Scavenge</code> 算法，它将新生代内存一分为二，每一个部分的空间称为<code>semispace</code>，其中处于激活状态的区域称为<code>From</code>空间，未激活(inactive new space)的区域称为<code>To</code>空间。这两个空间中，始终只有一个处于使用状态，另一个处于闲置状态。声明的对象首先会被分配到<code>From</code>空间，当进行垃圾回收时，如果<code>From</code>空间中尚有存活对象，则会被复制到<code>To</code>空间进行保存，非存活的对象会被自动回收。当复制完成后，<code>From</code>空间和<code>To</code>空间完成一次角色互换，<code>To</code>空间会变为新的<code>From</code>空间，原来的<code>From</code>空间则变为<code>To</code>空间</p><p><img src="https://cdn.jsdelivr.net/gh/kingmusi/blogImages/img/202204012059446.png" alt=""></p><p>这种算法是用<strong>空间换时间</strong>，虽然划分了一半内存保存存活变量，但有助于时间效率</p><h2 id="对象晋升" tabindex="-1">对象晋升 <a class="header-anchor" href="#对象晋升" aria-label="Permalink to &quot;对象晋升&quot;">​</a></h2><p>以下两个条件<strong>都</strong>会使对象晋升，即从新生代转移到老生代</p><ol><li>经历过一次<code>Scavenge</code>算法</li><li><code>To</code>空间的内存占比已经超过<code>25%</code></li></ol><h2 id="老生代" tabindex="-1">老生代 <a class="header-anchor" href="#老生代" aria-label="Permalink to &quot;老生代&quot;">​</a></h2><p>老生代管理着大量存活对象，所以不使用<code>Scavenge</code>算法，而是使用<code>Mark-Sweep(标记清除)</code>和<code>Mark-Compact(标记整理)</code></p><p><code>Mark-Sweep(标记清除)</code>分为<code>标记</code>和<code>清除</code>两个阶段，在标记阶段会遍历堆中的所有对象，然后标记活着的对象，在清除阶段中，会将死亡的对象进行清除。<code>Mark-Sweep</code>算法主要是通过判断某个对象是否可以被访问到，从而知道该对象是否应该被回收，具体步骤如下：</p><ul><li><p>垃圾回收器会在内部构建一个<code>根列表</code>，用于从根节点出发去寻找那些可以被访问到的变量。比如在JavaScript中，<code>window</code>全局对象可以看成一个根节点。</p></li><li><p>然后，垃圾回收器从所有根节点出发，遍历其可以访问到的子节点，并将其标记为活动的，根节点不能到达的地方即为非活动的，将会被视为垃圾。</p><p><img src="https://cdn.jsdelivr.net/gh/kingmusi/blogImages/img/20210422192831.png" alt=""></p></li><li><p>最后，垃圾回收器将会释放所有非活动的内存块，并将其归还给操作系统。</p><p><img src="https://cdn.jsdelivr.net/gh/kingmusi/blogImages/img/20210422192901.png" alt=""></p></li></ul><p>由于JS的单线程机制，垃圾回收的过程会阻碍主线程同步任务的执行。V8引擎引入<code>Incremental Marking(增量标记)</code>，即将原本需要一次性遍历堆内存的操作改为增量标记的方式，先标记堆内存中的一部分对象，然后暂停，将执行权重新交给JS主线程，待主线程任务执行完毕后再从原来暂停标记的地方继续标记，直到标记完整个堆内存，避免应用卡顿，提升应用性能。</p><h2 id="引用计数" tabindex="-1">引用计数 <a class="header-anchor" href="#引用计数" aria-label="Permalink to &quot;引用计数&quot;">​</a></h2><p>2012 年前浏览器使用的垃圾回收方式</p><h5 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h5><ul><li>对每个值都记录它被引用的次数。</li><li>声明变量并给它赋一个引用值时，这个值的引用数为 1</li><li>如果一个值又被赋给另一个变量，那么引用数加 1</li><li>如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1</li><li>如果引用数为 0，则说明可以安全地收回其内存</li></ul><h5 id="可能造成回收的不了的问题-循环引用" tabindex="-1">可能造成回收的不了的问题：循环引用 <a class="header-anchor" href="#可能造成回收的不了的问题-循环引用" aria-label="Permalink to &quot;可能造成回收的不了的问题：循环引用&quot;">​</a></h5><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> func</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    let</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> objA </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> new</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> Object</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">()</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    let</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> objB </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> new</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> Object</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">()</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    objA.b </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> objB</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    objB.a </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> objA</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如上例子，objA、objB 应该在函数结束调用时，就没用了，应该被回收。但实际上他们的引用数都为 2，不会被回收。</p><p><strong>现代引擎都是使用标记清理</strong></p><h2 id="提升性能" tabindex="-1">提升性能 <a class="header-anchor" href="#提升性能" aria-label="Permalink to &quot;提升性能&quot;">​</a></h2><p>垃圾回收是一个周期性的过程，基本上都是根据已分配对象的大小和数量来判断是否进行垃圾回收的。将内存占用量保持在一个较小的，可以让页面性能更好。</p><h5 id="_1-解除引用" tabindex="-1">1. 解除引用 <a class="header-anchor" href="#_1-解除引用" aria-label="Permalink to &quot;1. 解除引用&quot;">​</a></h5><ul><li>对于全局变量和全局对象的属性。如果数据不再必要，那么把它设置为 <strong>null</strong> ，从而释放其引用</li></ul><h5 id="_2-尽量使用-const-和-let" tabindex="-1">2. 尽量使用 const 和 let <a class="header-anchor" href="#_2-尽量使用-const-和-let" aria-label="Permalink to &quot;2. 尽量使用 const 和 let&quot;">​</a></h5><ul><li>因为这两个变量都以块为作用域，相比于 <strong>var</strong> ，可以更早的让垃圾回收介入</li></ul><p><strong>3. 少创建全局变量</strong></p><ul><li>全局变量会挂载到 window 上，一直能被访问的到，所以不会被回收</li></ul><h5 id="_4-减少闭包使用" tabindex="-1">4. 减少闭包使用 <a class="header-anchor" href="#_4-减少闭包使用" aria-label="Permalink to &quot;4. 减少闭包使用&quot;">​</a></h5><ul><li>需要内部函数的作用域被释放，闭包保存的变量才能被释放</li></ul><p><strong>5. 使用弱引用</strong></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("markdown/1-前端/4-JavaScript/1 基础/17-垃圾回收.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _17_____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _17_____ as default
};
